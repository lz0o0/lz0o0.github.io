[{"content":"\rHiii！ 我是 lz0o0 ，以后在本站就自称本鲤了😎！ 听首我喜欢的歌吧~\n","permalink":"https://lz0o0.github.io/zh/posts/%E4%BD%A0%E5%A5%BD%E6%9C%8B%E5%8F%8B/","summary":"\u003c!-- {{\u003c music id=\"557578993\" type=\"song\" server=\"netease\" \u003e}}\r\n --\u003e\r\n\u003cp\u003e\u003cem\u003eHiii！\u003c/em\u003e   \u003cstrong\u003e我是 lz0o0 ，以后在本站就自称本鲤了😎！\u003c/strong\u003e  \u003cstrong\u003e听首我喜欢的歌吧~\u003c/strong\u003e\u003c/p\u003e\n\u003c!-- eva --\u003e\r\n\u003cdiv id=\"player1\" style=\"--background-url: url('https://img.lizhuo.space/eva-15.jpg');\"\u003e\r\n\u003cscript\u003e\r\n    const ap1 = new APlayer({\r\n        container: document.getElementById('player1'),\r\n        audio: [\r\n            {\r\n                name: 'Komm,süsser Tod (M-10 Director’s Edit. Version)',\r\n                artist: 'arianne schreiber',\r\n                url: 'https://img.lizhuo.space/Komm%2C%20s%C3%BCsser%20Tod%20%EF%BC%8F%E7%94%98%E3%81%8D%E6%AD%BB%E3%82%88%E3%80%81%E6%9D%A5%E3%81%9F%E3%82%8C%20(M-10%20Director%E2%80%99s%20Edit.%20Version).flac',\r\n                cover: 'https://img.lizhuo.space/evas.png'\r\n            }\r\n        ]\r\n    });\r\n\u003c/script\u003e\r\n\u003c/div\u003e","title":"热爱，让你成为自己~"},{"content":"\r“今天首次尝试了隐形眼镜，正常大小的世界，已然是一种陌生的感觉了~”\r--- 2025-05-22\r“今天旁听组里师兄答辩的感觉很特别，略显局促但莫名的开心，拿到未来的一块拼图了~（ps其实很想送他们一程，导师临门一脚也是遂了我的愿，现场挺勇的，抬着手机到处拍照录像🤣”\r--- 2025-05-17\r“崂山的破晓，我发现一个人的旅行也很舒服😎~”\r--- 2025-05-04\r“带车去青岛，折腾，折腾，就要折腾！”\r--- 2025-05-03\r“雁栖湖-天津之眼，160\u0026#43;km，刷新个人骑行的最大里程，中途摔车给我摔醒了，没有同伴，可能真的坚持不下来🥱”\r--- 2025-05-01\r“照亮我们 黑暗的心 究竟是什么”\r--- 2025-04-25\r“事必求精，至美需极力（太正经了ban掉，玩尽兴，学到家！）！”\r--- 2025-04-23\r“AI-CFW,学习新技术总是让人兴奋！”\r--- 2025-04-17\r“😁 碎碎念页面完成了, So easy！”\r--- 2025-04-16\r","permalink":"https://lz0o0.github.io/zh/posts/life/says/","summary":"🤫 我愿称之为懒人日记界面\u0026hellip;","title":"💭 See what I Says"},{"content":" 正在跳转到 CCF推荐会议列表...\n如果页面没有自动跳转，请点击上方链接。\n","permalink":"https://lz0o0.github.io/posts/academic/ccf-rc/","summary":"\u003cscript\u003e\nwindow.location.href = \"https://lizhuo.space/CCF-RC/CCF-RC.html\";\n\u003c/script\u003e\n\u003cmeta http-equiv=\"refresh\" content=\"0; url=https://lizhuo.space/CCF-RC/CCF-RC.html\"\u003e\n\u003cp\u003e正在跳转到 \u003ca href=\"https://lizhuo.space/CCF-RC/CCF-RC.html\"\u003eCCF推荐会议列表\u003c/a\u003e...\u003c/p\u003e\n\u003cp\u003e如果页面没有自动跳转，请点击上方链接。\u003c/p\u003e","title":"CCF-RC"},{"content":"\r\u0026emsp;\u0026emsp;笑登科，颜眉展，苦韵渐甘。风波颂，短歌行，且与君同乐。\r\u0026emsp;\u0026emsp;躬耕三载，挥毫舞墨，不过几日光景。熙熙三军，亮剑决雄，难比自垒攻心。\r\u0026emsp;\u0026emsp;道起乾坤难言少，堪说真意简成诗。童生伏案，举子夺元，何人喜登科？\r\u0026emsp;\u0026emsp;年华易改，音难异，昔日小儿，今尤在？旌旗奋，西风烈，染遍了寰宇。今长缨在握，奋起缚苍龙！\r本诗写于2025年夏。\r\u0026emsp;\u0026emsp;笑登科，颜眉展，苦韵渐甘。风波颂，短歌行，且与君同乐。\r\u0026emsp;\u0026emsp;躬耕三载，挥毫舞墨，不过几日光景。熙熙三军，亮剑决雄，难比自垒攻心。\r\u0026emsp;\u0026emsp;道起乾坤难言少，堪说真意简成诗。童生伏案，举子夺元，何人喜登科？\r\u0026emsp;\u0026emsp;年华易改，音难异，昔日小儿，今尤在？旌旗奋，西风烈，染遍了寰宇。今长缨在握，奋起缚苍龙！\r","permalink":"https://lz0o0.github.io/zh/posts/poetry/%E6%B8%85%E5%B9%B3%E4%B9%90%E7%AC%91%E7%99%BB%E7%A7%91/","summary":"\u003c!-- more --\u003e\r\n\u003cdiv class=\"poem\"\u003e\r\n    \u0026emsp;\u0026emsp;笑登科，颜眉展，苦韵渐甘。风波颂，短歌行，且与君同乐。\r\n    \u003c/br\u003e\r\n    \u0026emsp;\u0026emsp;躬耕三载，挥毫舞墨，不过几日光景。熙熙三军，亮剑决雄，难比自垒攻心。\r\n\t\u003c/br\u003e\r\n\t \u0026emsp;\u0026emsp;道起乾坤难言少，堪说真意简成诗。童生伏案，举子夺元，何人喜登科？\r\n\t\u003c/br\u003e\r\n\t \u0026emsp;\u0026emsp;年华易改，音难异，昔日小儿，今尤在？旌旗奋，西风烈，染遍了寰宇。今长缨在握，奋起缚苍龙！\r\n\u003c/div\u003e\r\n\u003cdiv class=\"annotation\"\u003e\r\n本诗写于2025年夏。\r\n\u003c/br\u003e\r\n\u003cdiv style=\"border-top: 1px dashed var(--border);  margin: 2rem 0; padding: 1rem 0;\"\u003e\r\n    \u0026emsp;\u0026emsp;笑登科，颜眉展，苦韵渐甘。风波颂，短歌行，且与君同乐。\r\n    \u003c/br\u003e\r\n    \u0026emsp;\u0026emsp;躬耕三载，挥毫舞墨，不过几日光景。熙熙三军，亮剑决雄，难比自垒攻心。\r\n\t\u003c/br\u003e\r\n\t \u0026emsp;\u0026emsp;道起乾坤难言少，堪说真意简成诗。童生伏案，举子夺元，何人喜登科？\r\n\t\u003c/br\u003e\r\n\t \u0026emsp;\u0026emsp;年华易改，音难异，昔日小儿，今尤在？旌旗奋，西风烈，染遍了寰宇。今长缨在握，奋起缚苍龙！\r\n\u003c/div\u003e","title":"清平乐·笑登科"},{"content":"\r相关论文收录 The Internet censorship bibliography 生态全景 全球鸟瞰：Online Censorship 轴心区域：厄立特里亚、朝鲜、土库曼斯坦、沙特阿拉伯、中国、越南、伊朗、赤道几内亚、俄罗斯、古巴 边缘地带：欧盟、美国\u0026hellip; 审查测绘代表工作 GFWeb: Measuring the Great Firewall\u0026rsquo;s Web Censorship at Scale How Great is the Great Firewall? Measuring China’s DNS Censorship OONI:OpenObservatory of Network Interference Censored Planet: An Internet-wide, Longitudinal Censorship Observatory ICLab: A Global, Longitudinal Internet Censorship Measurement Platform 审查技能树 DNS审查： 内容过滤（关键字、DPI\u0026hellip;： 名单机制： 流量分析： 审查测量平台 ICLab OONI Censored Planet GFWatch GFWeb Internet Splintering 杂项 \u0026hellip; ","permalink":"https://lz0o0.github.io/zh/posts/academic/internet-censorship/","summary":"收录网络审查相关信息、主要研究及代表工作","title":"Internet Censorship"},{"content":"\r整体介绍 背景与发展 “方班研讨厅”又名创新与思辨，是方班的三门研究生创新课（研讨厅、演武堂、前沿秀）中的一门，也是方班最早推广的一门能力素质型课程。2019年秋在广大网安学院最早落地，凭借课程的独特性和方老师的号召力，该课程目前已经推广到国内29所高校，以创新实验班和研讨课程的形式进行落地和展开。\n特色与目标 方班研讨厅由中国工程院方滨兴院士设计并亲自全程参与教学。课程采用小班制、研讨点评式教学模式，由方滨兴院士、知名专家和专业老师组成教学组，采用**“学生讲、师生问、专家评”的深度翻转课堂形式，通过锻炼学生掌握求源方法、熵减方法、实践动手方法和思辨方法**，从而培养创新和思辨能力。课程以“授之以渔、掌握方法”为最大特色。突出实验班区别于常规课程的独到之处，着重强调以论文研读分享为核心教学模式，说明这种形式如何激发创新思维、深化知识理解。\n形式与内容 方班研讨厅的课程主要包括**“论文研讨分享、辩论赛”**两项，另有少量线上课作导引介绍方班另外两个课程的部分内容，两学期的时长中，第一学期包含两次论文研讨分享和一次辩论赛，第二次为一次论文研讨分享，形式相似但要求有所变化。\n论文研讨分享主要以研讨课形式展开，学期初排定课表，按照不同的专题学生被排到不同的班级，对应一个具体的线下班，每节课能够对应到 4 个同学的论文研讨分享。分享包括“论文讲评、学生提问、专家交流、院士点评”四个环节，整个分享过程不超过40分钟，讲评时间需要控制在19-21分钟内。\n辩论赛参考正常辩论赛的组织形式，与安全研究相关联。\n论文研讨分享：求源、熵减、思辨 论文筛选与范围 ： 为什么要讲这个论文？介绍论文所属的领域、方向，提及筛选论文的标准，是依据热点前沿、经典奠基之作还是导师推荐，展现论文的品质与关联性。—— 选择新的热的好的，倒逼熟悉旧的经典的；选择热门方向，筛选有讨论空间的（3次选择：作者、方向、工作效果、可复现否）——摸索\n阅读方法与策略 ： 分享在阅读过程中的技巧，如先浏览摘要、结论把握大意，提取核心观点、梳理逻辑架构后，再逐字剖析关键章节、图表。过程借助工具辅助（小绿鲸、WPS、亿图图示、excalidraw、Kimi等）。—— 个人习惯不同，精读差异不大（2day—5day）—— 摸索\n个人分享内容架构 ： 分享如何组织串联，如何将论文的背景铺垫、研究方法剖析、实验结果解读、创新点提炼等模块串联起来，让听众能清晰捕捉论文精髓。—— 怎么讲故事？当前标准化，非常流水线\u0026hellip; 背景、问题、【现象（发现）or “他山之石”】、方法、结论【复现与展开】、讨论【我作何想法】 —— 学习积累迭代\n分享形式与技巧 ： 线下讲演、线上直播，图文并茂的 PPT 演示，动画演示，与同学、老师的互动，抛砖引玉与注意力的引导。—— 架构上作优化、适当引入新奇的、夺人眼球的 —— 学习积累迭代\n交流与互动技巧： 熟悉内容的基础上答论文的观点or自己的想法（这个务必要有）、对问题的理解和评估、漏掉的细节是否关键、互动时简洁明了【别让皮球长时间停在自己脚下】—— 学习积累迭代\n阶段小结与问题收集： 下阶段迭代优化、避免 —— 给老师预讲、给师兄姐、同级预讲反馈不同 —— 综合迭代、以原本想讲的故事为主线\n辩论赛：调研、表达、思辨 攻守分析：敌我阵地、优势弱项分析、深度调研提炼、如何据守阵地步步为营 辩论技巧：有来有回（充耳不闻）、各说各话（不在一个频道） 交流与收获：策略狡辩、战术忽略、表演性质【收放难说】 印象与评价 投入产出比整体稍高 ：投入（前期准备【一个月、3篇】；程序化工作【线上平台、预讲、翻译、教案\u0026hellip;】；中途时间【内容占比、低相关研究】）、产出（求源、熵减、思辨一套方法论【未点明，自学习】） 程序化工作自优化：线上平台提问、回答【回答蛮有价值】、翻译\u0026amp;教案材料准备 预分享关注逻辑 ：预分享时主要关注自己讲故事的逻辑、架构是否顺畅合理，问题能不能讲清楚；根据校验加新东西 挑选问题并对比学习汲取：问题质量各异，分享者相对熟悉可以给出判断；从好问题中补充短板，从师生差异中明白问题的副要点 低相关研究多关注形式 ：当作科普了解、关注形式有无可借鉴的、方法可移植的【少有】 收获与心得 知识层面 ：每次论文研究分享都能熟悉一个小方向【透明代理、WAF；混淆代理、隧道通信；DDos】，大概都能串成一条主线；同方向的知道别人的兴趣和代表工作【特征使用方法，如包长、突发序列、流图\u0026hellip;】 批判思维 ：论文的内容，自己的想法与呈现；自己的转述、挑选与听众的疑问与反馈；交流讨论过程中的批判 沟通与表达 ：表达清楚自己的观点、自己表达的侧重与技巧【语速、节奏、重点】；与同学的合作 一整套方法论：读论文、讲东西、如何讲的准确更甚者有趣、提问题提思路、动手尝试 课程相关材料 各期论文与PPT：方班之声.zip\n注：内容为课程内部材料，不能随便公开，需要者联系我申请，表明来意\n","permalink":"https://lz0o0.github.io/zh/posts/academic/%E6%96%B9%E7%8F%AD%E6%94%B6%E8%8E%B7%E5%9B%9E%E9%A1%BE/","summary":"对24-25 UCAS 方班的小结","title":"方班收获回顾"},{"content":"\r\u0026emsp;\u0026emsp;人猿相揖别。只几个石头磨过，小儿时节。铜铁炉中翻火焰，为问何时猜得，不过几千寒热。人世难逢开口笑，上疆场彼此弯弓月。流遍了，郊原血。\r\u0026emsp;\u0026emsp;一篇读罢头飞雪，但记得斑斑点点，几行陈迹。五帝三皇神圣事，骗了无涯过客。有多少风流人物？盗跖庄屩流誉后，更陈王奋起挥黄钺。歌未竟，东方白。\r本诗写于1964年春，首次公开发表于1978年9月9日的《人民日报》\r1.创作背景：\r\u0026emsp;\u0026emsp;1963年，中国已基本上克服了经济上连续三年的困难，国家建设也出现了新的繁荣景象，人民当家作主的新中国在战胜暂时的困难后，显现出勃勃生机。\r2.参考译文： 类人猿进化到人，告别了类人猿的漫长时代。之后，就进步到最早的石器时代。从石器时代进化到青铜、铁时代，这样的冶炼技术究竟是在什么时候掌握的呢？只不过是几千年的事情。纵观历史，也如人这一生多半忧愁少开怀。尽是征战杀伐弓箭疆场。这大好河山哪一处没有战争没有流血。 通读完了二十四史，我已满头白发，我自己的人生也走到了暮年。回顾起来不过是那些同样的事情一再发生，什么王侯将相功名利禄，有多少人为其白首执迷。那些所谓的英雄人物难道是真风流？我看不尽然。盗跖、庄蹻、陈胜、吴广这些敢于揭竿而起挑战统治者的权威的人，那才是真豪杰。歌声意犹未竟，东方已经曙色初露了。 3.参考赏析： 本词上阙说出人类刚诞生时那惊心动魄的一刻；下阕艺术性地浓缩了词人一生读历史书的情形。全词风格豪放、气象雄浑，更复庄而不板、谐而不谑，其历史跨度，纵贯古今，对人类社会的全部历史发展进程予以概括描绘并深刻评弹，写得博大宏阔，却又似在诙谐谈笑间，隐寓着智者的卓识、仁者的义愤、勇者的信念。\n\u0026emsp;\u0026emsp;人猿相揖别。只几个石头磨过，小儿时节。铜铁炉中翻火焰，为问何时猜得，不过几千寒热。人世难逢开口笑，上疆场彼此弯弓月。流遍了，郊原血。\r\u0026emsp;\u0026emsp;一篇读罢头飞雪，但记得斑斑点点，几行陈迹。五帝三皇神圣事，骗了无涯过客。有多少风流人物？盗跖庄屩流誉后，更陈王奋起挥黄钺。歌未竟，东方白。\r","permalink":"https://lz0o0.github.io/zh/posts/poetry/%E8%B4%BA%E6%96%B0%E9%83%8E%E8%AF%BB%E5%8F%B2/","summary":"\u003c!-- more --\u003e\r\n\u003cdiv class=\"poem\"\u003e\r\n\t\u0026emsp;\u0026emsp;人猿相揖别。只几个石头磨过，小儿时节。铜铁炉中翻火焰，为问何时猜得，不过几千寒热。人世难逢开口笑，上疆场彼此弯弓月。流遍了，郊原血。\r\n    \u003c/br\u003e\r\n\t\u0026emsp;\u0026emsp;一篇读罢头飞雪，但记得斑斑点点，几行陈迹。五帝三皇神圣事，骗了无涯过客。有多少风流人物？盗跖庄屩流誉后，更陈王奋起挥黄钺。歌未竟，东方白。\r\n\u003c/div\u003e\r\n\u003cdiv class=\"annotation\"\u003e\r\n本诗写于1964年春，首次公开发表于1978年9月9日的《人民日报》\r\n\u003c/br\u003e\r\n\u003cspan class=\"bold\"\u003e1.创作背景：\u003c/span\u003e\u003c/br\u003e\r\n\u0026emsp;\u0026emsp;1963年，中国已基本上克服了经济上连续三年的困难，国家建设也出现了新的繁荣景象，人民当家作主的新中国在战胜暂时的困难后，显现出勃勃生机。\r\n\u003c/br\u003e\r\n\u003cp\u003e\u003cspan class=\"bold\"\u003e2.参考译文：\u003c/span\u003e\u003c/br\u003e\n  类人猿进化到人，告别了类人猿的漫长时代。之后，就进步到最早的石器时代。从石器时代进化到青铜、铁时代，这样的冶炼技术究竟是在什么时候掌握的呢？只不过是几千年的事情。纵观历史，也如人这一生多半忧愁少开怀。尽是征战杀伐弓箭疆场。这大好河山哪一处没有战争没有流血。\u003c/br\u003e\n  通读完了二十四史，我已满头白发，我自己的人生也走到了暮年。回顾起来不过是那些同样的事情一再发生，什么王侯将相功名利禄，有多少人为其白首执迷。那些所谓的英雄人物难道是真风流？我看不尽然。盗跖、庄蹻、陈胜、吴广这些敢于揭竿而起挑战统治者的权威的人，那才是真豪杰。歌声意犹未竟，东方已经曙色初露了。\n\u003c/br\u003e\u003c/p\u003e","title":"贺新郎·读史"},{"content":"\r一、答辩主要内容 1. zm师兄： 研究目标：DNS解析失败归因分析，构建归因分析体系\n研究内容：\n研究点1：基于随机模拟的DNS解析器负缓存测量方法\n部分厂商未按RFC实施负缓存，失败流量占比高原因 现有负缓存基于响应码实施，粒度无法支持深度归因 研究点2：基于上下文感知的DNS失败流量低频域名分析\n低频域名缺乏关注，聚合体量大，很多由算法自动生成\n14维语言特征提取—引入语言学模型评估\n低频域名很多为云服务、CDN、内网域名，涉及用户UUID等信息泄露传递\n研究点3：DNS解析失败原因分析系统\n技术路线：多源规则来源（RFC、威胁情报、专家经验、实验经验 技术路线：解析失败归因体系 技术路线：规则匹配图运用 发表论文和项目完成情况\n专家问题（右起）：整体内容不错，工作量详实，主要问题在研究目标描述和研究点的对应不够准确和清晰\nlqy：恶意域名使用注明、扫描行为去除原因注明、第三个点降成原型系统，目前并不健壮 专家2：题目所述和研究点标定围绕不够紧密，私以为二八 专家3：域名泛化对低频域名筛选的影响 中间跳过slm、fbx、gl老师 专家4：本归因体系解决问题明确 专家5：解析失败流量占比高是现象非挑战，失败归因原因尽量再明确，归因对安全的帮助 xg：解析失败流量的数量？当前只提了占比（better：主流厂商like chrome的滥用；内网隐私通过域名信息泄露的分析；归因分析展开到各个层级会更好，深入到具体的安全归因点能带来较大提升） slm：背景部分概念更明确一些，类似负缓存；原型系统而非系统；系统部署得到的结论补充，说明实际效果2. lqw师兄 2. by师兄： 研究目标：测绘发现不同的加密DNS服务类型，服务精细化管理 背景：加密DNS服务可能被滥用绕过监测，标准协议和多种私有协议并存，缺乏精细化管理 现状：私有加密DNS识别缺乏通用方法（隧道通信识别、解析网站识别） 研究内容：融合标准服务识别，私有服务发现，解析内容推断，提出加密DNS服务测绘关键技术 研究点1：基于多层级迭代探测的标准加密DNS服务识别（域内授权/域外授权权威解析识别区分） 研究点2：基于协议交互状态机的私有加密DNS服务发现 研究点3：基于HTTP/2帧解析序列侧信道的网站指纹识别（HTTP/2下帧的重要性） 原型系统：加密DNS服务测绘原型系统 发表论文和项目完成情况 专家问题（左起）： xg：网站指纹识别的规模、粒度（1/1634）\u0026ndash;此前的数据缺少，缺少复杂场景；数据集如何构造（顺序有区别，87%的准确度到规模大时能保证吗？方法的上限有多大？私有加密DNS服务的依赖分析） 专家2：①学术创新总结一些，做测量的传统问题，容易偏工程，学术性显得不强（方法+结果） ②发现的意义再总结，提供现实管理意义 ③方法在速度上提升如何（DOT快，DOH3day，DoQ的发现基于DoT） 专家3：研究点2第四章（方法和数据集都是自研，面临评价问题，注意文字和方法的规范化）；手动探APP的描述规范细化 专家4：95页图，数字显示；97页不良内容含义明确 专家5：60页结果描述不太明确；65页适用率为80%的解释不清，数字的对应关系 lqy：内容推断和分析需要过渡；50%的恶意（反常识的结果需要着重解释） slm：工作细、工作量够；研究所的目录模板公式化（普遍问题）；学术性描述加强 二、个人小结： 1. 问的最多的几个问题： 研究点和标题的对应关系：各讲各的还是只讲了一部分？实际做的事对应于描述是否准确？目录结构过时（私以为是风格问题\n做的事和所做事情的意义：你干了什么我听不出来，那说明你没干或者你干的不到位或者你理解和描述不到位，这里每一个都能否定你的工作；明确自己要做的事和实际做的事，找到工作的定位和价值，这是研究的意义，于己收束过往于人开引将来\n研究的理解门槛：不论是硕士还是博士，我认为大论文最起码的要求是能把你要做一个什么事，怎么做的事，讲个清楚，大就大在系统，对于一般读者而言可以不懂技术细节，但能知道大致怎么做的，这是作者理解和描述的问题，大论文的理解门槛不能太高，基本的概念都要讲清讲透，基本共识一定要稳固\n学术性和工程性：可以用问题、难点、方法、创新、解决来概括这两个偏向，一般的大论文应该都包含这些部分，学术性的区别主要体现在针对难点的方法创新，一般来说不会是纯技术的，答辩并不需要深钻创新的技术细节，告诉我公式怎么运作计算、具体如何跟踪流量，需要讲明的是方法，提供结果，并保证这个过程中方法的科学性和稳固性，合理可能是科学的但不稳固，自证永远有本位主义的问题，自创逻辑很难反驳，缺乏比较和讨论空间本身难以不稳固（you know 三角形具有稳定性🐶bushi\n论文图文数字细节：答辩的老师基本从开题听到中期、预答辩再到最后答辩，对于你所做的内容是比较熟悉的，而且他们的眼睛都很毒辣，能一眼找到问题，需要精益求精，只能花时间死磕\n2. 个人感悟 毕业更像个仪式，是对自己过去3-5年的总结，场下工作越足，场上约平静，波澜不惊 答辩是答而不辨，上升到辨就是没讲清楚，答的好的基础是有价值的问题、有稳固的逻辑、有达意的描述、有清楚的表达\u0026hellip;\u0026hellip; 答辩人可能对当时没什么感觉，但过后回想起来，这将是极其美妙的时刻，不是说为了答辩纪念，而是它象征着某种精神和身体上的长征胜利结束了，所谓3-5年的“豪赌”在自己的操盘下渐渐成为明确的结果。其实也不需要太多辞藻和大加赞美，这是一件有相当挑战性的事，但也是挺平常的一个选择 时光飞逝，祝福组内的zm、by、xo、yq、ly顺利毕业！ ","permalink":"https://lz0o0.github.io/zh/posts/academic/%E6%AF%95%E4%B8%9A%E7%AD%94%E8%BE%A9%E6%97%81%E5%90%AC%E7%BA%AA%E8%A6%81/","summary":"今天组内两位师兄毕业，恭喜他们，走上了人生一个新的阶段！","title":"毕业答辩旁听纪要"},{"content":"\r1. WAF的定义 WAF全称 Web Application Firewall，即Web应用防火墙，是一种专门用于保护Web应用服务免受各种网络攻击的安全防护工具。在现有网络中，WAF可能作为一个独立的硬件设备安装在网络中，也可能以软件形式作为模块集成到服务器上。随着云化趋势的深度扩展，云化接入、云集成的形式将成为主流发展方向。\n这里看似WAF有多种表现形态，为防止疑惑，有必要重塑一下对于防火墙的理解。所谓的“防火墙”，指的是一个处在外网和内网之间、由软件和硬件设备组合构成的保护屏障，“墙”的概念是一种获取安全性方法的形象说明。也就是说，防火墙本身就是计算机软件和硬件的结合，任何正常的、合规的网络通信和数据包能够通过此“墙”的筛查、过滤，而那些“坏东西”无法穿墙而过。\n了解网络技术最好先对场景有个整体的概念，WAF的工作场景如上图所示（这次试一下Excalidraw的手绘风格）。一般来说需要运营web业务的主体有部署WAF的需求，比如拥有网站服务的一般机构网络、Web服务提供商等。实际中，WAF部署选择会复杂许多，后面会专门介绍。\n区别于传统防火墙，WAF工作在应用层，处于Web业务服务器和客户端（比如，浏览器）之间，对Web网站或App业务的HTTP/HTTPS流量进行监测和过滤，通过一系列安全策略和规则来进行恶意特征识别及防护，就像在Web应用周围建立了一道安全屏障。\n2. WAF需求背景和功能 WAF的出现与传统防火墙的局限相合。传统防火墙主要工作在网络层和传输层，一般主要针对IP地址、端口等进行过滤控制，针对应用层的攻击较难识别，比如无法理解HTTP(s)中的内容，对一些恶意请求（如SQL注入、XSS攻击）无法进行识别。WAF的出现正是为了解决这些问题。\nWAF的推广与Web应用本身的广泛相伴。任何对运营和盈利有需求的网络主体，面临日益复杂的Web应用攻击手段，自然愿意为应用层防护买单，而WAF是一个直接易用的选择。\n那么，WAF的出现是为了解决哪些问题呢？我们试着从攻击者的角度去思考这个问题：假设本鲤作为一个攻击者，我基本的步骤是 “选定目标 → 目标画像 → 漏洞缺陷分析 → 攻击方式 → 发起攻击 → 胜利/失败结算时刻” 。在思考WAF时，不需要全流程的罗列，我们简单关注几个点，重点放在（w/o）WAF的情况下有什么差异即可。\n攻击者选定的目标由大到小大致如下，一般目标越大造成的危害越广泛，收益也越高。在选定目标之后，本鲤自然不会冒失地去搞一些小伎俩，我首先做的就是对目标画像，从多个维度了解目标，尽可能找出他的缺点或弱点，然后伺机而启，一击毙命。因此我会进行网络探测（踩点扫描）、服务版本识别等操作，从多个维度为目标画像，找缺点、弱点。\n全网 \u0026gt; 网络主机 \u0026gt; 主机数据库 \u0026gt; 主机WEB系统管理员 \u0026gt; 主机WEB系统其余用户 一个Web网络的结构如上图所示，我们假设网络的管理者安全意识足够，已经用传统防火墙对Web业务服务器进行了保护。很显然，由于防火墙在网络层和传输层进行了过滤，我们再想用主机发现、端口扫描之类的简单攻击行为就基本无效了，攻击者可能只能获取到Web业务服务域名信息（图中为www.0w0.com），想获得主机相关的IP、端口状态、系统等信息只能在其它层（比如应用层）想想办法。\n首先，可以通过Options、Trace方法探测目标服务域的节点拓扑。如果Web服务器支持这两个方法的话（一般来说，目前安全点的网站都不会允许这两个方法），可以通过检查响应包的Via或Max-forwards字段，得到各个节点的域名。然后，进一步查找对应的IP，尝试对IP直接进行扫描。 如果失败了，可以直接访问服务，检查响应包的Server字段或X-Powered-By字段确定业务域各个节点的http服务器软件版本和脚本语言解释器版本。可能需要扫描页面查看能否获取系统信息，如操作系统类型、版本，开启服务类型等，如有则可进一步查询CVE版本漏洞，并在exploit-db上寻找相应方法攻陷主机。 复杂一些，可以检查有无文件路径遍历，文件包含注入，API注入，命令注入之类的漏洞，来获取整个站点的系统信息甚至获取webshell。或者寻找有无SQL注入、XSS和URL注入等漏洞 —— 总言之，作为攻击者，拥有的武器库非常之丰富强大 理论上，WAF应当针对Web应用的HTTP(s)流量进行安全防护，可能需要支持的功能包括：\n禁止HTTP协议的非安全方法 伪装Web服务的特征 防止API和命令注入防止路径遍历和文件包含注入，对敏感的系统路径进行保护 防止sql注入 防止XSS攻击 防止网页挂马 防护CC攻击 文件上传的防护 动态IP黑名单 白名单 与实时计算平台对接 \u0026hellip;\u0026hellip; 截至目前，WAF已经进化到WAF3.0，除了常见Web应用攻击的防护外，能够防御CC攻击，还能支持精确防护，进行攻击事件管理等，功能可以说已经十分强大，可以简单看看阿里云WAF3.0的介绍：\n3. WAF发展历程和主要变化 随着 Web 技术的不断演进，WAF 也历经了从 1.0 到 3.0 的发展与变革。WAF 1.0 诞生于传统 Web 时代，基于签名规则应对基础攻击；WAF 2.0 随着 Web 2.0 的兴起而出现，引入动态分析与机器学习优化；如今的 WAF 3.0 则是在黑客利用零日漏洞攻击增多的背景下，以构建正常应用行为模型来实现更全面、更精准的防护，满足现代网络安全需求。\nA. 发展历程 从 WAF 到 WAF 3.0 的发展历程如下：\nWAF 1.0 ：在入侵检测系统 / 入侵防护系统（IDS/IPS）基础上，利用 HTTP 属性和数据转换进行分析，采用基于签名的方法，主要针对服务器攻击，如 SQL 注入、跨站脚本攻击等。 WAF 2.0 ：随着 Web 2.0 技术栈和关键网络应用数量激增，传统基于签名的方法过时，于是引入动态分析方法和监督式机器学习来优化签名列表，同时增加了保护用户免受攻击的方法。 WAF 3.0 ：黑客利用零日漏洞攻击增多，防御者需构建正常应用行为模型来检测异常，WAF 3.0 应运而生，可保护免受零日漏洞攻击，并防止绕过尝试。 B. 主要变化 WAF 从传统版本发展到 3.0，在全方位发生了变革与优化，主要表现在以下四个方面：\n接入方式 ：WAF 3.0 在支持 CNAME 接入和透明接入的基础上，实现了与应用型负载均衡 ALB 等云产品的云原生架构集成，支持云产品接入，还增加了全新的云原生架构接入方式，即通过 SDK 模块化的方式将 WAF 集成在云产品的网关中，避免因额外引入一层转发而带来兼容性和稳定性问题。 防护配置 ：相比 WAF 2.0 为单个域名配置防护规则，WAF 3.0 支持为防护对象或防护对象组配置防护策略，可通过创建防护模板配置防护规则，还支持通过多种方式查看防护规则，以及管理默认防护规则。 功能优化 ：WAF 3.0 取消了规则防护引擎的智能规则托管功能、自定义规则的滑块验证功能等部分功能，但新增了防护模板配置、自定义响应规则、重保场景防护、高级资产中心等功能。 技术应用 ：WAF 3.0 更多地引入了机器学习、人工智能等技术，能够自动学习和识别新的攻击模式，通过对大量网络流量数据进行分析和建模，检测出异常行为和潜在攻击，提供更高级别的防护。 4. WAF的工作原理和流程 Web 应用防火墙（WAF）通过深度检测和过滤 Web 应用的 HTTP/HTTPS 请求与响应，防御常见 Web 攻击。本部分介绍WAF的工作原理、关键模块和大致的工作流程。下图一般WAF的部署方式，直接插入到防火墙后面：\nA. 工作原理 请求检查（全面检查）：WAF 拦截每个传入的 Web 请求，包括请求头、请求体、URL 参数等。检查来源 IP、URL 路径是否异常，是否含特殊字符、SQL 关键字等，还检测请求头（如 User-Agent 字段）是否被篡改。\n规则匹配（预定义规则集）：WAF 内置基于常见 Web 攻击模式（如 SQL 注入、XSS 等）的安全规则。将请求特征与规则匹配，若符合恶意模式（如参数含 XSS 代码），判定为恶意请求。\n防护动作（多样化响应）：根据匹配结果采取防护动作。阻止恶意请求，防止其访问 Web 应用；记录攻击时间、源 IP、类型等信息到日志文件，方便后续分析；向管理员发送警报，提示攻击发生。\nB. WAF 的关键模块 WAF 专注于保护 Web 服务和 Web 应用，能深入分析 HTTP 流量，有效防御多种 Web 攻击。其核心是规则策略模块，能区分正常与恶意流量，并采取相应防护措施。\n入侵检测模块：分析 HTTP 输入输出数据流，识别潜在威胁。 规则策略模块：依据黑白名单、规则集区分正常与恶意流量，是 WAF 的核心依据。 防护模块：在检测到恶意请求时，采取拒绝服务、返回 400 响应页面等防护措施。 C. 工作流程 以请求处理为例，WAF的工作流程大致如下：WAF接收请求 → 请求检查（来源IP、URL路径、特殊字符等；黑白名单、规则集） → 规则匹配（与预定义规则对比；请求解密、头部\u0026amp;内容过规则） → 判断是否恶意请求 → 是 → 防护动作（阻止请求、记录日志、报警） → 否 → 请求继续处理。\n在处理过程中采取的操作可能包括直接放行（比如匹配到URL白名单，直接放行至Web服务器）、关卡放行（进入下一检测关卡），以及丢弃、拒绝、重定向、暂停（对于暴力攻击）、代理导流（如蜜罐）。\nWAF同样会对响应作一定处理，但相比请求要简单许多。下图是WAF处理过程的工作流示意：\n5. WAF的部署模式 随着网络安全需求的不断演进和技术的持续创新，WAF的部署经历了一定的发展变化。早期的反向代理、透明代理和旁路监控等传统模式，与如今云原生的架构进行了融合，WAF的部署方式变得更加灵活、高效且适应性强。这些变化能够提升WAF在复杂网络环境中的适用性和性能表现，极大简化部署和管理流程，使其能够更好地满足现代企业对Web应用安全防护的多样化需求。\n此前提到，在现有网络中，WAF可能作为一个独立的硬件设备安装在网络中，也可能以软件形式作为模块集成到服务器上。随着云化趋势的深度扩展，云化接入、云集成的形式或将成为主流。云化并未根本改变WAF部署的模式结构，而是将此前的部署模式与云场景、云部署进行了融合。\nA. WAF的主流部署模式 WAF一般支持透明代理、反向代理和旁路监控模式，三种部署模式从网络结构上存在明显的区别。\n透明代理串接模式 ：将WAF串接在网络中，实现即插即用，无需更改网络设备与服务器配置。其优点是部署简单、对网络结构无影响、安全防护性能强、故障恢复快可支持Bypass；缺点是对网络的依赖性较强，若网络出现故障可能会影响WAF的正常工作。 反向代理模式 ：早期WAF多采用此模式，其部署在Web服务器前端，客户端请求先经过WAF，由WAF代为转发请求到后端服务器，再将服务器的响应返回给客户端。优点是部署相对简单，且能有效隐藏后端服务器地址等信息，对服务器有较好的保护作用；缺点是可能会成为性能瓶颈，且需要更改网络配置，故障恢复相对较慢。具体可细分为代理模式和牵引模式，主要区别在于映射转发的位置。 旁路监控模式 ：通过在交换机上做服务器端口镜像，将流量复制一份到WAF上，WAF仅对流量进行监控和告警而不阻断，部署时不影响在线业务。此模式优点是不影响现有网络业务，可作为安全监测手段；缺点是无法直接对攻击流量进行阻断，只能起到事后分析的作用。\nB. 当前主流接入方式 当前主流的 WAF 接入方式各有特点，分别为 CNAME 接入、云产品接入和云原生架构接入。CNAME 接入操作简单，适合大多数网站业务，修改通过域名 DNS 解析实现引流；云产品接入则适用于阿里云用户，在云产品控制台添加引流端口到 WAF，无需修改 DNS，降低了配置复杂度；云原生架构接入是 WAF 3.0 的特有方式，采用 SDK 模块化集成，避免流量转发带来的兼容性问题，提升业务性能，简化接入流程。\nCNAME接入（反向代理模式）：CNAME 接入是通过将域名的 DNS 解析指向 WAF 提供的 CNAME 地址，使 Web 业务流量被引流到 WAF。WAF 作为反向代理集群，拦截攻击请求并将正常业务请求转发回源站服务器。它适用于大多数网站的 Web 业务，操作相对简单，只需修改域名的 DNS 解析设置，可以有效隐藏源站 IP，便于集中管理多个域名的流量并实施统一的安全策略。 云产品接入（透明代理模式）：云产品接入是通过在云产品控制台（如阿里云的 ALB 等）添加引流端口到 WAF，使云产品网关自动改变路由，将 Web 业务流量引导至 WAF。WAF 进行攻击拦截并转发正常请求回源站。它适用于使用阿里云云产品的用户，无需修改 DNS，降低了配置复杂度，减少了因 DNS 变更可能带来的流量中断风险，该接入适合与云平台应用产品紧密集成的场景。 云原生架构集成接入：这是WAF部署模式的重要发展方向，以阿里云WAF 3.0为代表。采用 SDK 模块化的方式将 WAF 集成到云产品的网关中，内嵌在网关中的 SDK 提取流量并进行检测和防护，WAF 不直接参与流量转发。它适合对业务性能和稳定性要求较高的场景，尤其是当用户已在使用阿里云的云产品且希望通过更高效的方式实现安全防护时。这种方式避免了因额外引入 WAF 转发层而可能产生的兼容性和稳定性问题，提升了业务性能，简化了接入流程，降低了对用户业务的影响。 6. WAF vs 其它 WAF的功能，免不了要与传统安全设备如IDS和IPS有所对比，但从WAF的出现和发展，俨然就是一个“专项特种兵”的模板，因此有其独特优势的同时，短板和局限也是十分明显的。\nA. WAF 与其他网络安全设备的对比 传统防火墙：工作在网络层和传输层，侧重源地址、目的地址和端口号的初步检测，无法深入分析 HTTP 流量。 入侵检测系统（IDS）：部署在内部网络，监控网络安全状况，侧重检测和审计，无法主动防御。 入侵防御系统（IPS）：基于签名数据库和策略来检查已知漏洞和攻击，适用于保护多种网络协议，但不专用于 HTTP 流量。 B. WAF 的价值与优势 深度防御：工作在应用层，能够审计所有 HTTP 流量，提供比传统设备更深入的 Web 应用保护。 灵活性：可以快速修改规则策略，及时应对不断变化的攻击。 速率限制：能够快速实施速率限制，有效防止 DDoS 攻击。 C. WAF 的局限 协议局限：WAF主要针对HTTP/HTTPS协议，无法过滤其他协议（如FTP、PoP3）的流量。 功能局限：无法实现传统防火墙的功能，如地址映射、端口转发等网络层和传输层操作。 攻击局限：主要针对应用层攻击，由于难以理解复杂业务逻辑，无法识别如恶意利用优惠券、外挂抢购等业务逻辑攻击，也无法防御零日攻击和部分复杂的应用层攻击。 防护局限：不具备防病毒功能，无法检测和清除终端设备上的病毒和恶意软件。 误报和漏报：尽管是共性问题，但WAF中部署模式的影响可能比较明显。 性能开销：对HTTP流量的深度检查和过滤会增加请求处理时间，导致延迟，且在处理大量流量时会消耗较多系统资源，影响Web应用性能。 配置和管理复杂：需要专业知识和经验来合理配置规则，过于严格或宽松都会影响效果，且需要定期更新规则以应对新的攻击方式，增加了维护成本。 7. 主流供应厂商和WAF产品 目前市场上的WAF产品种类繁多，涵盖了云WAF、硬件WAF和软件WAF等多种部署模式。云WAF产品如AWS WAF、Akamai Kona Site Defender、Fortinet FortiWeb、Cloudflare WAF等，具有部署便捷、易于扩展和集成等优势，适合各类企业使用。硬件WAF产品如安恒明御Web应用防火墙、长亭雷池(SafeLine)等，适合对安全性要求较高的企业。软件WAF产品如网站安全狗、云锁等，适合中小企业和开发者。各厂商不断推出创新产品和解决方案，以满足不同用户的需求。\n下表是目前比较主流的WAF供应厂商和产品线（这部分借助kimi整理）：\n公司名称 简述 国内 深信服 国内领先的网络安全解决方案提供商，WAF 产品简单易用、高效防护，广泛应用于各类企业及机构。 绿盟科技 提供硬件 WAF 产品，在网络入侵防护领域技术深厚，能有效应对各类 Web 攻击。 启明星辰 国内知名网络安全企业，硬件 WAF 产品防护能力强、功能丰富，满足金融、能源等行业需求。 安恒信息 国内网络安全佼佼者，天穹 Web 应用防火墙硬件产品，提供多方位安全防护服务。 腾讯云 提供云 WAF 服务，具备强大 Web 攻击检测能力，支持多种架构及接入方式，满足多行业需求。 阿里云 云 WAF 结合多种云服务交付，市场占有率高，提供全面防护功能及灵活付费模式。 国外 Fortinet 提供硬件和软件形式的 WAF 解决方案，其 FortiWeb 产品采用多层安全方法，防止已知和未知攻击，保护 Web 应用程序和 API，支持物理设备、虚拟机、云实例和容器等多种部署方式。 Imperva 提供全面网络安全解决方案，WAF 产品及服务防护能力强、功能丰富，应用于全球大型企业。 Cloudflare 全球知名云服务提供商，WAF 服务集成于云平台，具备强大 DDoS 防护及 Web 攻击防护功能。 Akamai 提供软件和托管服务形式的 WAF 解决方案，依托全球分布式网络，保障 Web 应用可用性和安全性。 F5（CloudGuard） 提供高性能硬件 WAF 设备和软件解决方案，在应用交付和安全领域经验丰富，提供高级防护。 Barracuda Networks 提供多种形式的 WAF 解决方案，产品易用且高效，可有效保护 Web 应用免受多种攻击威胁。 厂商 产品 部署模式 核心能力 AWS AWS WAF 基于云 基于云的WAF解决方案，与AWS服务集成，提供可扩展和灵活的保护，实时威胁检测和阻止，可自定义规则和策略 Akamai Kona Site Defender 基于云 提供企业级保护，高级DDoS保护，实时威胁检测和阻止，与Akamai的CDN集成以改善性能，全面的报告和分析 Fortinet FortiWeb 硬件或虚拟 基于AI的威胁检测和阻止，提供硬件和虚拟解决方案，机器人保护和DDoS缓解，全面的报告和分析 Cloudflare Cloudflare WAF 基于云 提供低延迟、高可用、高可扩展的防护能力，可防止OWASP Top 10等常见攻击，可根据用户自定义规则和Cloudflare智能规则进行灵活配置，可与其他服务集成 ModSecurity ModSecurity WAF 主机层 开源免费，灵活配置，支持多种协议和格式的分析和过滤，可使用OWASP Core Rule Set等标准规则集，也可使用用户自定义规则，还可与其他工具集成 阿里云 阿里云WAF 基于云 提供基于云计算的Web应用防火墙，保护Web应用免受常见黑客攻击技术和安全漏洞的侵害 腾讯云 T-Sec WAF 基于云 提供Web应用防火墙服务，具备Web安全防护和Web威胁智能拦截功能 华为云 Web应用防火墙 WAF 基于云 提供Web应用防火墙服务，保护Web应用的安全 安恒信息 玄武盾 基于云 提供云防护平台，具备Web应用防火墙功能 百度智能云 云应用防火墙 WAF 基于云 提供应用防火墙服务，具备安全漏洞防护和云安全应用防护功能 知道创宇 创宇盾 基于云 提供Web应用防火墙服务，具备政企网站防护、被黑防护、防篡改等功能 F5 分布式云 WAF 基于云 提供分布式云WAF服务 奇安信 网站卫士 基于云 提供Web应用安全防护服务 360 磐云 基于云 提供Web应用防火墙服务 网宿科技 Web应用防火墙 基于云 提供Web应用防火墙服务，具备网站防护和智能边缘安全功能 深信服 云Web应用防火墙 基于云 提供云WAF服务，具备Bot防护和云安全功能 绿盟科技 网站云防护 基于云 提供云计算安全产品，具备网站云防护功能 启明星辰 虚拟化WAF 虚拟化 提供虚拟WAF服务，具备Web应用安全网关功能 长亭科技 雷池(SafeLine) 硬件 下一代Web应用防火墙，提供Web应用防护功能 天融信 Web应用安全防护系统(TopWAF) 硬件 提供Web应用安全防护系统服务 瑞数信息 动态Web应用防火墙（River Safeplus） 硬件 提供动态Web应用防火墙服务 写在最后 本质上，WAF作为一种专用网络安全技术，在安全防御体系中需要承担特定的责任。用现实世界中安防机构的安防全景图来类比，WAF比较类似一个大门入口处智能安检系统的角色，负责检查进入Web应用的“人员”（HTTP请求），并拦截可疑行为（如SQL注入、XSS攻击）。\n关于安防机构的全景图，我简单设想了一个分层比喻的对应情况，便于理解WAF的角色定位：\n外部防御层：防火墙（围墙+安检门）+ VPN（加密电梯） 入口过滤层：WAF（智能安检系统） 内部监测层：IDS（摄像头）+ IPS（安保人员）+ HIDS（保镖） 数据保护层：加密技术（保险柜）+ 网络隔离（防火分区） 高级防护层：蜜罐（诱饵房间）+ 零信任（人脸识别门禁）+ SIEM（指挥中心） Refer WAF相关专栏： 安全文章相关\nWAF的部署方式 - 知乎\n什么是Web应用防火墙，简称：WAF（Web Application Firewall）_waf应用安全网关是什么-CSDN博客\nWAF（Web应用防火墙）的关键技术分析_waf路由模式-CSDN博客\nWAF 2.0和WAF 3.0是什么关系、有什么区别、如何快速使用_Web应用防火墙(WAF)-阿里云帮助中心\nWAF基本原理与部署方式，建议收藏！ - FreeBuf网络安全行业门户\nKimi：Kimi - 会推理解析，能深度思考的AI助手\n","permalink":"https://lz0o0.github.io/zh/posts/nice-techs/%E5%85%B3%E4%BA%8Ewaf%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E4%BB%80%E4%B9%88/","summary":"WAF即Web应用防火墙，专门用于保护Web应用服务免受各种网络攻击。本文主介绍WAF的需求背景、工作流程和拓扑、主要业界厂商。","title":"关于WAF--Web应用防火墙"},{"content":"\r一、zero-to-one 1. 什么是MCP？ MCP（Model Context Protocol）即模型上下文协议，由Anthropic在2024年11月25日发布的一篇文章中最早向公众提出：Introducing the Model Context Protocol。该文章将MCP描述为一种新的连接标准（即通信协议），用于统一前端AI助手和后端数据系统之间的连接方式，以期帮助前端模型完成更高质量的工作。\n2. MCP的提出背景和拟解决问题？ 问题与需求：随着AI助手得到广泛运用，整个行业对AI模型功能的投入相继加码，实现了推理能力和响应质量的巨大进步。然而，即便是目前最精良复杂的模型也存在与数据源相隔离的限制，它们各自隔离并处在遗留系统和信息孤岛之上，每个数据源的调用和访问都需要用户单独自定义实现（此前主要通过function calling，模式类似一把钥匙开一把锁，但配这么多钥匙并不轻松），这使得真正连接的系统（比如Manus）难以扩展其能力。\n3. MCP的核心思想？ MCP的方案：MCP核心思想是采取单一通信协议，取代碎片化集成。在原有混乱多样的连接形式下，只要大家都按照统一的标准开发和提供接口，原本需要针对每个数据源单独自定义连接方法的问题，就可以得到有效解决。而Anthropic推动并提供了这样一个通用的开放连接标准——MCP，对AI系统和数据源之间的连接进行了规范和统一。\n4. MCP的组成结构？ MCP的架构：采用典型的“C-S”架构，在数据源（借助MCP Server）和AI助手（借助MCP Client）间构建双向连接，开发者可以选择构建MCP Server以公开其数据访问提供服务，亦可选择开发MCP Client用以连接各种类型的MCP Server访问其服务。\nMCP的组成成分：由上图可见，MCP主要包含三个核心组件：MCP Host、MCP Client、MCP Server，囊括两类数据服务：Local Data Sources、Remote Services。\nMCP Host：宿主机，即希望通过 MCP 访问数据的 Claude Desktop、IDE 或 AI 工具等宿主机应用程序 MCP Client：客户端，在宿主机应用程序内部，负责与MCP服务端保持一对一连接，可以理解为连接进程的端点，可以配置MCP Server MCP Server：服务端，一些轻量级程序，每个这样的程序都通过标准化的 Model Context Protocol 公开特定功能(比如查询时间 Local Data Sources：本地数据源，即MCP 服务器可以安全访问的本地计算机文件、数据库和服务 Remote Services：远程服务，即MCP 服务器可以连接到的 Internet 上可用的外部系统（比如通过 WebAPI，访问git和github） 5. MCP的工作流？ 下图是MCP运行时的大致工作流。以一个 \u0026lt;问题查询并通过邮件返回通知\u0026gt; 的任务为例，MCP的整个工作流程是这样的：用户问题 → MCP Hosts（如 Chat Apps）接收问题 → 大模型进行意图分析，根据分析结果进行响应或任务编排 → MCP Clients 按照编排选择工具完成任务（if need） → 【 ① MCP Servers 利用其能力（如工具、资源、提示等）进行处理 or ② MCP Servers 可能会调用外部的 API（如 Web Services、Database、Local Files 等）来获取所需数据 】 → MCP Servers 将初始响应返回给 MCP Clients → 客户端初将始响应告知大模型，大模型进行优化，并再返回给 MCP Clients （Clients 可能会进行进一步的通知操作 ）→ MCP Clients 显示最终响应，并向用户显示任务执行结果。\n对应图中 Transfer Layer 的部分是 MCP Clients和 MCP Server 进行初始化的过程，这个阶段发生在任务执行之前，因而未在工作流中提及。这一阶段主要是完成 MCP Servers 的注册，初始化之后，Client 与 Server 维持 1:1连接，方便后续调用。\nMCP这种“C-S”架构和工作流的设计使得宿主机应用程序（比如 Claude ）可以在不同场景下灵活调用各种工具和数据源，而开发者也只需专注于开发对应的 MCP Server，无需关心 Host 和 Client 的实现细节，解决现有问题基础上能够模块化分离各方开发的重心，提高开发效率。\n二、MCP 工作机制的核心 基于上图的工作流，我们发现MCP工作过程中尤为重要的三个阶段，理解这三个阶段的实施和逻辑，能够帮助我们掌握 MCP 工作机制的核心特点。\n如何理解 MCP Server 的初始化？ 如何智能选择 MCP Server，进行任务编排？ MCP Server 执行结果的反馈机制是怎样的？ 1. 如何理解 MCP Server 的初始化？ MCP 服务端的初始化是在启动 Host 读取配置文件后，预先完成的。在上一节的工作流介绍中并未提及 MCP Server 进行初始化的细节，具体过程如下（见下图）：MCP Clients 向 MCP Servers 发送初始请求 → MCP Servers 收到请求后，进行初始化响应，告知其可用tools/list → 完成初始化通知，所有的 MCP Servers 完成注册。\n这里有几个问题需要思考，为什么要预先进行初始化注册？初始化之后具体发生了什么变化？什么时候需要初始化？\n为什么要预先进行初始化注册？\nMCP 要预先进行初始化注册是为了确保 MCP Server 在开始提供服务前处于可用且正确的状态，具备所需的资源和环境配置，并能够与其他组件（如 MCP Host 和 MCP Client）正常通信，同时确保服务的安全性和合法性。这一步骤有助于 MCP Server 正确暴露其功能接口，使得其他组件能够发现和调用其服务，同时也为后续的服务管理和动态更新打下基础，从而保障整个 MCP 系统的稳定运行和有效协作。\n用最开始的MCP图示作类比，MCP初始化注册的过程很像电脑注册外接设备。当你连接一个外接设备（比如 USB 设备）到电脑时，电脑通常需要先识别该设备并加载相应的驱动程序。在这个过程中，电脑会预先注册设备的信息，如设备类型、制造商、设备 ID 等。这一步骤确保了电脑知道设备的存在，并且能够与设备进行通信。如果等到你实际要使用设备的具体功能（比如读取 USB 存储设备中的文件）时才去注册设备信息，那么在你尝试使用设备时可能会出现延迟，甚至无法正常使用，因为系统还没有准备好与该设备通信。\n同样，MCP Server 的预先初始化注册就像是在告诉系统（MCP Host）“我在这里，我能够提供这些服务”，这样当客户端需要使用这些服务时，系统已经知道如何找到并使用 MCP Server，而不需要在每次任务执行时都去发现和配置 Server，从而提高了效率和可靠性。\n初始化之后具体发生了什么变化？\n初始化后，MCP Server 从不可用状态转变为可用状态，系统为其分配了所需资源，并加载了运行环境，使其能够正常响应请求并提供服务。同时，它向 MCP Host 注册了自身提供的服务接口和功能，使得其他组件能够发现并调用这些服务。\n状态转变：MCP Server 完成初始化后，其内部组件和功能模块被正确加载和配置，从初始的未准备好状态转变为可以接受和处理外部请求的状态 资源分配：系统根据 MCP Server 的需求为其分配了必要的资源，包括内存、计算能力等，确保其在运行过程中有足够的资源来执行任务，从而提高服务的响应速度和处理能力 服务暴露：MCP Server 向 MCP Host 注册了详细的服务信息，包括服务接口、功能描述等。这些信息使得 MCP Host 和其他组件能够了解该 Server 的能力，并在需要时快速找到并调用相应的服务 最直观的变化一是相关配置确定，二是可通过MCP Client查看Server提供的工具或数据服务。至于注册信息的存储位置，通常由 MCP Host 负责管理，可能存储在 MCP Host 的内存中（以便快速查询和管理）、配置文件中（如 JSON、XML、YAML 格式文件，存储在 MCP Host 的配置目录下）、数据库（对于需要持久化的场景，可能存储在关系型或非关系型数据库中）或分布式缓存（如 Redis，用于提高查询效率和系统性能）。具体的存储位置和方式取决于 MCP Host 的实现细节和系统架构设计。\n以 vscode 使用 cline 访问 Time MCP服务为例，按照 MCP 配置文件进行 Time 的初始化。(上图为配置文件, Cline 插件的配置文件位于 VSCode 的用户配置目录中, 此例中为 C:\\Users\\\u0026lt;YourUsername\u0026gt;\\AppData\\Roaming\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json。具体的配置文件名和位置可能因插件而异，建议查看插件的文档获取准确信息。）Cline 启动 Time 后，能够查看其支持的 tools 和 resources，能够对该Server进行重启、删除等操作。而关于此 MCP Server 的相关信息，此后在与大模型交互时，也会告知大模型。\n如果希望拥有多个可用的 MCP Servers，你需要分别对每个 MCP Server 进行初始化操作，或者通过某种批量处理机制来启动和初始化多个 Servers。每个 MCP Server 都需要单独完成其初始化流程，确保它们都正确注册到 MCP Host 并准备好提供服务。\n什么时候需要初始化？\n在 MCP 系统中，初始化通常在添加和配置MCP Server时即完成，通常不需要每次运行任务或查询时都重新进行初始化注册。一旦 MCP Server 成功完成初始化注册，它就可以在 MCP Host 中保持注册状态，直到 Server 被关闭、重启或者显式地注销。这样设计的原因在于：\n提高效率：避免每次任务执行前都要重复注册流程，节省了时间和系统资源，加快了任务的启动和执行速度 保持服务的持续可用性：使 MCP Host 和客户端能够实时了解 MCP Server 的在线状态和服务能力，确保在需要时可以立即调用，无需额外的准备工作 简化管理：减少了注册和注销操作的频率，使得系统管理更加简洁和高效 如果 MCP Server 发生了诸如重启、全局配置变更等情况，可能需要重新进行初始化注册，以确保 MCP Host 能够获取到准确的 Server 信息并继续提供服务。这很自然，重载配置文件的过程自然需要刷新状态，完成每个 MCP Server 的初始化。\n需要注意的是，初始化主要是针对单个 MCP Server 来说的，指的是该 Server 完成自身的启动配置、资源分配以及与 MCP Host 的注册过程。当一个 MCP Server 成功初始化后，它就处于可用状态，可以被 MCP Host 和其他组件发现并调用了。在实际使用时, MCP通常是根据 MCP Servers 的全局配置文件来读取每个 MCP Server 的信息并完成对应的初始化注册或状态刷新。\n2. 如何智能选择 MCP Server，进行任务编排？ 首先， MCP Server 的选择范围受到初始化结果的限制，这是智能选择的前提条件，也是问题解决的一个限制因素。其次，大模型理解用户任务需求后，进行意图分析，确定需要返回的内容和获取内容的方法，这是对任务目标的明确。最后，大模型综合意图分析结果（目标），已有 MCP Servers 的可选项（条件和限制），从中选择特定的 Server，指定访问的工具和参数（智能选择），即完成任务编排过程。\nRefer MCP开源库：Model Context Protocol 什么是MCP｜工作原理｜如何使用MCP｜图解MCP - 知乎 MCP 是什么，现状和未来 | OneV\u0026rsquo;s Den ","permalink":"https://lz0o0.github.io/zh/posts/nice-techs/mcp-%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AE%E5%85%A8%E8%A7%A3/","summary":"MCP模型上下文协议,通过采取单一通信协议，取代碎片化集成，对AI系统和数据源之间的连接进行了规范和统一，打破了传统模型和数据源之间互相隔离和访问繁琐的限制，重塑了模型和数据的操作和安全边界。","title":"MCP 模型上下文协议全解"},{"content":"\r1. 背景 2022年以来，AI 应用井喷式爆发，各种通用 AI 大模型和一众垂类 AI 应用相继出现，并迅速席卷各个行业。AI 的迅速推广、普及，为社会的各行各业带来强大助力，也为广大用户的学习生活提供诸多便利，但于此同时， AI 应用服务从用户接入、智能体处理、外部调用到模型训练的全生命周期，普遍缺乏透明度和内容安全监管，用户隐私泄露、模型内生安全、越狱攻击、意识渗透等安全威胁的危害越发突出，AI 内容缺乏有效、可靠的技术监管机制，AI 应用安全面临新一轮挑战。\n尽管实现全周期的内容安全监管十分复杂，但仅仅在 AI 用户和 AI 应用之间，进行交互内容的监管、过滤却并非不可行，最直观的思路就是部署一个 AI 内容防火墙，也就引入本项目的需求，下文简记为 AI-CFW。\n简言之，本项目的目标即实现一个 AI-CFW 原型系统，该系统部署于 AI 应用和 AI 使用者之间，能够对使用者的提问以及 AI 应用的回复内容进行过滤。应用于实际，AI-CFW 需要满足以下要求：\n实时发现恶意指令、越狱尝试、价值观异常的 AI 回复或违反内容合规、数据隐私要求的情况\n进行格式回复、拒绝应答或会话阻断等操作\n此项目需求来源于UCAS课程，本鲤主笔。为方便管理，在此文作记录归档。\n2. AI-CFW 设计难点与目标 Agent（智能体） 是目前 AI 应用中比较热门的一个概念，用户通过向 Agent 智能体提出需求，Agent利用其工具、记忆以及规划能力，给出回复满足用户需求。“需求-回复”的交互看似简单，但在网络传输中，却是实实在在历经了比较“漫长”的传输过程（本鲤发现不了解网络的同学实际不知道自己和服务间的流量是怎么传输和处理的，本鲤后面单开一篇，埋坑\u0026hellip;）。安全需求是需要场景的，而明确了需求角色之后，场景和目标自然明确，假定“本鲤是一名机构网络的网络管理员（真网管！）”，那么参考下图右边的结构进行分析，我们可以进一步明确 AI-CFW 设计与实现面临的挑战。\n面对上述网络场景，AI-CFW 设计面临的主要挑战如下：\n如何将对所有大模型的访问都纳入监管？\nhttps应用普遍情况下如何获得交互内容？\n如何判定大模型输出结果是否违规？\n在设计之初，我们将 AI-CFW 的预期目标设计如下：\n流量还原与 AI 机器人的对话内容（包括但不限于文本，图片，文档等） ✓ 相关知识点：流量还原，应用识别，加密内容获取等 研究审核 AI 聊天内容中的违规内容 ✓ 相关知识点：字符串匹配过滤，内容理解，虚假信息检测等 3. 已有解法分析： 我们分析一下行业风口的巨头们都是怎么做的，他们的解法，可能对本项目有所启发。具体而言，目前已针对 AI 发布内容防火墙产品或网关的企业并不在少数，诸如火山引擎、启明星辰、Cloudflare、Kong、Gloo、 Higress、Portkey 和 OneAPI等，本鲤主要梳理了前三个厂商的产品和模式特点。（之后了解到 Portkey 、OneAPI 针对 AI 的原生特性更强，后续再作补充吧）\nA. 火山引擎（供给侧 AI 保障） 大模型应用防火墙 —— WAF串接模式：火山引擎是字节旗下的云服务综合平台，其推出的大模型应用防火墙（下简称LMs-WAF），主要提供算力消耗防护、提示词识别、优化内容生成和鉴权与用量配置等功能，它更加侧重于对服务侧 AI 业务的防护，力求保证 AI 应用平稳落地，提供可靠、安全、优化等服务。（关于WAF是什么，本鲤后面简单开一篇介绍）\n针对的目标群体是愿意为 AI 业务平稳运营，支付检测保障费用的 AI 企业。\nLMs-WAF 的防护结构如下图所示，包含四维防护优化：接入净化保护（可用性）、提示词注入检测、数据窃取识别、鉴权分析（外部调用、内部投毒）。\n火山 LMs-WAF 提供两种接入方式：通过CNAME接入（试用于未基于火山部署AI业务的企业）、通过火山原生CLB开启TCP监听接入。CLB即负载均衡，实际上基于CLB监听接入的方式也主要是基于CNAME的，至于原因，后面会再解释。下面是两种接入方法的部署结构拓扑：\n考虑到不同背景的小伙伴，简单介绍一下CNAME（这是域名解析中比较常见的概念，对DNS有了解或者自己鼓捣过小网站的同学应该很熟悉），其余的内容图中很直观，具体不再赘述。\n【CNAME】是域名解析中的一个记录名称，也叫别名记录，这个别名的概念是相对 A(Address) 记录而言的。域名解析的一般过程便是访问A记录，将域名映射为对应的IP地址，而CNAME记录则能够将域名解析为另一个域名，这时你发现只要将原本用户访问的域名A通过CNAME解析到域名B，那么生效后，用户在进行DNS解析时，就会直接去访问B指向的服务器地址了，访问流量走的是另外一条路径（CLB业务基本是这个模式，比如CDN中的加速资源就基本与域名绑定。这里也解释了为何上面说第二种方法实质也是基于CNAME。【火山CLB中间用监听实现内容检测的这个结构很值得思考，或许可能为旁路部署提供经验。不过这里缺乏进一步信息，难成主线，咱有空再来填坑】\n上面说了很多，个人或者小团体实际上很难用火山的模式复刻一个 AI-CFW，因为 LMs-WAF 实际更侧重AI应用的全流程业务优化防护，需要供给侧服务商的加入，个体缺乏号召力，另外这种模式的运营也十分依赖火山云服务本身够硬的能力。\n但是退一步说，LMs-WAF 比较有借鉴意义的是他们在接入层和智能体中间进行的提示词注入检测，以及参照的内容合规标准。\n【提示词注入】是一种 AI 应用攻击方式，通过分工协作的“越狱 Prompt”+“恶意诱导 Prompt”，能够绕过平台和模型原生安全机制，诱导模型生成恶意内容。现实中需要考虑服务可用性和检测严格阈值的trade-off，因而这种攻击难以根除。针对这种安全威胁，火山 LMs-WAF 采用了意图识别、防提示词注入、动态对抗与价值观校准等防护机制，通过利用 AI 能力对抗 AI 攻击，提升大模型面对提示词注入的应对能力：\n通过深度上下文引擎，可识别97%隐式攻击\n基于千万级对抗样本训练，覆盖20+提示词攻击场景，检出率达99%+\n经某大模型服务平台实测，违规内容及价值观偏移回答均下降98%\n【内容合规标准】：《生成式人工智能服务暂行管理办法》中 5 大类 31 个小类规定\nB. 启明星辰（用户侧数据脱敏） 大模型访问脱敏罩MADA Mask —— 网关串接模式：启明星辰是一家主攻安全服务的综合提供商，目前由中国移动实际控股，专责网信安全，覆盖网络安全、数据安全、应用业务安全等多个领域。启明星辰发布的大模型访问脱敏罩MADA Mask（Model Application Desensitization Access Mask，下简称LMs-Mask），主要关注机构对外访问开放大模型时，在充分保障共有大模型效用的前提下，如何有效避免自身敏感数据泄露的问题，其核心是为用户侧访问提供专业可靠的数据脱敏服务。\n针对的目标群体是机构或企业单位，具体服务模式和接入方式，未得到其公开声明。\nLMs-Mask 的防护结构如下图所示，其核心是保障数据上传过程中的敏感内容识别和安全脱敏：LMs-Mask串接在机构用户访问各种公域或私域大模型的路径上，提供对机构用户的数据脱敏（智能围栏、全链审计），并能够对内容进行智能阻断（NLP识别、优化调整）。\nLMs-Mask 同样提供两种部署方式，实质都是网关串接：本地网关形态部署（串接于企业网络边界出口）、SAAS化代理网关形态（串接公有云，访问特定入口。考虑目前云化的趋势，这应该是目前主流的方式）。下图是SAAS化代理网关形态的结构：\n简单补充下SaaS的概念，**SaaS（软件即服务）**是一种基于云计算的软件交付模式，通过互联网提供应用程序，用户无需购买、安装和维护软件，只需通过网络浏览器或移动应用程序访问和使用软件。通过SaaS模式的特点，可以简单猜测LMs-Mask的拓扑结构：用户通过软件/浏览器接入启明星辰提供的代理节点，节点支持请求处理和回源转发，并最终返还交付回用户。 启明星辰对 LMs 的部署模式进行了分析，简要总结例举在下方：\n全私域部署：在机构内部部署满血DeepSeek或其他全功能大模型。这样机构内部使用大模型，数据泄露的直接风险相对不高（并非完全没有）；对应机构的投入成本相对较高。 公共大模型访问开放部署：机构为内部员工提供自由访问的外部大模型。这样机构的投入最少、起步最快；数据泄露风险暴露面最大，最危险。 公共大模型访问罩部署：机构为内部员工访问外部大模型提供一个访问代理，并同时安排数据安全和其他应用安全保护。这样可以在极少的投入下，让机构全员能够获得大模型应用的收益。该部署方式和前两种部署方式并不互斥。（也就是LM-Mask的解法） 混合大模型访问体系化部署：基于AI-R-IAM身份管理、业务分割、网络分域、数据分域的复杂部署方式。这种部署模式适用于大型机构的深度应用环境。 LMs-Mask的解法比较符合本项目的需求，思路比较值得借鉴。一方面对用户侧上传的数据进行脱敏处理，防止泄露风险同时保障隐私性，另一方面，网关串接的模式对于用户几乎无感，实施相对简单。但是这种方法，数据处理和安全脱敏都较高程度地依赖代理节点，对其性能要求和可靠性要求可能较高。\n由于其未公开产品接入具体方法，本鲤对其本地串接过程和云外接访问过程中数据流的处理还有些模糊，初步猜测应该是基于证书-密钥的还原形式。\n【内容合规标准】：《数据安全法》、《个人信息保护法》\nC. Cloudflare（API网关） AI gateway —— 反向代理模式：Cloudflare的大名无需多言（全球最大的CDN服务商），作为首款全球连通云，其产品线和服务囊括计算、存储、网络全栈，实力非常之雄厚（这里不得不赞，很多时候，CF很像个慈善家\u0026hellip;\u0026hellip; )。Cloudflare推出的基于其公有云Serverless的 Cloudflare AI Gateway（下简称 LMs-Gateway），是一个用于管理和扩展生成式 AI 工作负载的统一接口，用户可以通过它提高对 AI 应用程序的可见性和控制能力，它支持多方提供商，包括 OpenAI、Google Vertex AI、Azure OpenAI、HuggingFace、Amazon Bedrock 和 Anthropic（最近大火的MCP）等。\n具体而言，LMs-Gateway 的核心功能就是提供一个统一的接口，这个接口可以管理和扩展各种生成式 AI 的工作负载，包括各种访问流和 API 调用。无论模型在何处运行，只需通过将应用程序连接到 LMs-Gateway ，它就可以充当服务与具体服务提供商之间的代理，网关管理者因而可以监控用户交互的过程、进行日志记录，并利用缓存、速率限制、请求重试和模型回退等扩展功能。\n针对的目标群体相对广泛，包括个人和企业用户。\nLMs-Gateway 的结构如下，依赖其本身对多方提供商的支持能力，主要在服务和具体的服务承载工具之间充当 API 代理，整体的拓扑结构类似反向代理，就用户体验而言实际就等同于一个大模型API代理。\n借由上图中的结构，服务请求都被发送到 LMs-Gateway，网关再进行请求的转发，并从缓存读取响应回递传送给用户。这个过程中，流量进出都经过 Cloudflare ，流量的还原处理应当也是基于证书密钥。\n简言之，Cloudflare 的 AI Gateway 主要功能即一个反向代理，若用户原本直接经过 OpenAI 的 API 访问https://openai ，那么现在仅需把访问服务的 baseURL 换成https://gateway.ai.cloudflare.com/v1/${accountId}/${gatewayId}/openai 即可。\n这个方案有下面几个优点：\n只需修改 baseURL 即可接入，不改变 API 格式，接入相对简单 服务是 Serverless 的，不需要用户额外管理任何服务器 借助 Cloudflare 的全球网络可以实现一定的用户接入加速 借助 Cloudflare 的全球网络可以一定程度隐藏掉源 IP，对于访问受限的区域可有奇效 该方案对应的缺点如下：\n所有请求信息包括 API Key 都需经过 Cloudflare ，存在一定安全隐患 LMs-Gateway 扩展比较麻烦，目前提供的不支持内容检查过滤 上面两个厂商的产品，个人很难进行 demo 演示，而 Cloudflare 的 LMs-Gateway 服务又对于个人用户十分友好，因此本鲤以 LMs-Gateway 监控 MCP Server-Time 任务流过程的例子为引，简单演示下这类网关能够达到的效果，主要包含5个步骤：\n在 Cloudflare 平台创建 LMs-Gateway 实例，使用 API 作为 endpoint 连接到应用服务器，创建出口点，也即 baseURL\n在 vs code 中通过 cline 配置将大模型 API 站点都配置为从 API endpoint 访问\n在 cline 中调用一个 MCP Server：Time，简单执行一个任务，让流量流经 LMs-Gateway，下图以Time为例，简单查询了当前的北京时间\n在 LMs-Gateway 中 check 日志看看网关能捕获到什么内容。（通过请求响应的过程，其实可以对MCP请求响应的特点进行分析，这个内容本鲤目前在做，后面也要单开一篇讲）\n小结 整体而言，各家厂商发布的 AI-CFW 都呈现出以下共性：\n基本都以串接模式（网关or服务代理）接入，确保用户或局域网的访问都可纳入监管 内容合规的判断都借助 AI 赋能，参考某些内容审查标准实施 防护整体要么侧重供给侧业务保障要么关注用户侧隐私保护，并无完全独立的安全第三方（当然了，这样两头不讨好，既引入信任问题，也比较难盈利 串接尽管需要的条件强，但模式和管理都简单，优点明显，加密流量还原的难点可以一定程度绕过（真要旁路硬做加密解析，其实很头大\u0026hellip;），还原基于证书密钥应该可以基本解决；当然如果考虑旁路监听（Note：火山CLB本质还是串接）的话，火山的模式需要再深入\u0026hellip;\u0026hellip;\n通过上面的梳理，思路相对比较明确了：①串接部署：选择串接结构能够解决很多困难，包括覆盖度和流量还原问题，还原采取证书-密钥形式进行解决；管理形式最好是 Serverless，不需要对服务作过多管理。②内容合规审查：串接节点获取到还原的流量内容后，需要进一步关注流量的检查、处理和转发。重点是内容合规的标准和判断、优化方法，需要考虑多模态的复杂情况。\n4. 初步计划与设计 关于整体设计思路：\n①串接部署：串接结构选择能够解决很多困难，包括覆盖度和流量还原问题，还原思考证书-密钥形式进行解决；管理形式最好是 Serverless，不需要对服务作过多管理。 ②内容合规审查：串接节点获取到还原的流量内容后，需要进一步关注流量的检查、处理和转发，重点是内容合规的标准和判断、优化方法，需要考虑多模态的复杂情况。\n关于具体实施落地：\n①串接参考 Cloudflare 的 AI Gateway，基于证书-密钥进行流量还原。在转发和日志的基础上，需要增加检测、过滤或脱敏。（Cloudflare网关的实操上面已作示意，需要再调研如何基于证书-密钥进行流量还原（配置过程实际可以看出来了，本鲤后续跟进了Fiddler代理抓包的解密，这种形式应当可以借鉴），需要进一步调研跟进如何自建实现同类服务，以及在上面如何附加审查能力）\n②内容合规审查目前考虑加入 AI （内容理解、虚假检测支持），但只能本地微调（否则会迭代引入泄露）；另外需要基本的关键词匹配、敏感词表作基础匹配过滤的支撑；最后要考虑多模态数据的转换和统一读取问题。（基本是以文字为主，进一步要考虑doc文档、pdf文件、图片等样式数据如何读取和理解的问题\n关于分工和对口：本鲤统筹、推进\n①：全员（关键，决定思路能不能最终落地，注意这里是三个问题）\n②：AI 支撑（俊）、关键词\u0026amp;敏感词匹配（博）、多模态读取（杰）\n5. 具体设计方案介绍 下面为最终设计方案：AI-CFW集成到现有防火墙，需要用户信任证书，内容检测模块化插入。\n方案整体的设计思路是采用透明代理模式 -【基于证书密钥还原流量 + 模块化内容检测处理】，运行后流量加解密对用户无感，用户无序进行过多的修改（仅需信任根证书）。\n顶层设计：在网络防火墙处插入 AI-CFW，利用其网络边界防护天然优势，对网络进出流量集中监控过滤\n网络结构：目标网络采用接入-汇聚-核心的分层结构，理论可兼容大中小型组网\nA. 流量还原：基于自签名证书or内部CA签发 基于证书-密钥进行流量还原的思路包含自签名和内部自建CA签发两种具体实施方法，用自己颁发的证书密钥和用户建立加密连接可以避免流量还原的问题，并且用户只需要信任根证书，考虑性能、复杂性等因素，这种模式，相比直接利用代理工具构建中间代理有很大优势。\n上图是两种实施的流程，它们的核心步骤是基本一致的。\n自签名证书：防火墙生成自签名证书并安装，分发给用户设备并配置信任。用户设备发起HTTPS请求时，防火墙返回证书，建立加密连接后解密流量进行审查，再重新加密转发内部CA签发证书：防火墙向内部CA提交CSR，安装签发的证书。推送内部CA根证书给用户设备并配置信任，后续流程同自签名证书\n内部CA签发证书：防火墙向内部CA提交CSR，安装签发的证书。推送内部CA根证书给用户设备并配置信任，后续流程同自签名证书\nB. 内容处理：基于多模态处理+基础匹配+引入本地 AI 赋能 AI-CFW 整体划分为五个功能模块，流量加解密实际就是A部分流量还原的功能，中间三个模块依次负责多模态数据读取、基础匹配和AI赋能检测的任务，最右侧的处理与告警模块则实际嵌入到中间内容检查的处理周期中，管理员可在防火墙通知中查看反馈。\n多模态数据读取：处理文本、图片、文档等多类型据，支撑全面内容监控 关键词/敏感词匹配**（基础匹配）**：快速识别风险内容，为基础处理提供判断依据 AI-for 内容理解-恶意检测**（引入本地AI赋能）**：深度理解内容，检测复杂恶意信息，提升检测能力和过滤精准度 参考内容合规标准：《生成式人工智能服务暂行管理办法》中 5 大类 31 个小类规定 \u0026amp; 人类经验\n按照上述 AI-CFW 设计方案，理论上，能够很好地满足需求，并且能够针对多模态数据、复杂内容检测需求进行适应和处理，方案是相对完备的（from teacher，至于具体实现能到达什么效果，就事在人为了！\n简单logging下分工：由于本鲤对网络相对熟悉，整体方案的设计和组织汇总由我完成和把关；多模态的部分由杰完成；基础规则匹配由博负责；AI-for检测部分交由俊处理，本次设计整体是符合预期的。\n写在最后 本组方案考虑基于已有防火墙进行功能集成，本鲤认为这种模式相比基于Mitproxy代理等中间代理的模式要更好一些，简单、易用，用户可接受，也便于管理。实际上要真正用的话，只能尽量考量串接对流直接作处理，旁路模式更类似操作日志，飞走这条路可以 follow 下火山CLB旁路监听的实现模式。\n整体来说最后给出的这个方案只是比较完整和系统，完成了部署网络结构和整体框架的界定，至于具体的检测需求和目标明确，需要在各个模块特定的问题中界定和解决，比如对敏感内容的修改、优化，最基础的对文本模特检测的支撑等等。\nRefer：如有侵权，请联系删除 使用Cloudflare AI Gateway监控、控制和优化 AI 应用 - waka\u0026rsquo;s blog 大模型应用防火墙，发布！ 新赛道 | 启明星辰发布“大模型访问脱敏罩”，客户安心面对DeepSeek引爆的访问安全刚需 Cloudflare网关理解 + Cloudflare网关解读 上面埋了几个坑，简单记个账，不能吃霸王餐：\n关于WAF你需要知道什么？ 火山CLB旁路监听实现内容检测 用户和web服务间的流量传输处理过程概览 MCP请求-响应的特点 ","permalink":"https://lz0o0.github.io/zh/posts/affair-logs/ai%E5%86%85%E5%AE%B9%E9%98%B2%E7%81%AB%E5%A2%99/","summary":"2020年至今，AI 应用井喷式爆发，但AI 内容缺乏有效、可靠的技术监管机制。本项目意在实现一个 AI-CFW 原型系统，部署于 AI 应用和 AI 使用者之间，能够对\u003cstrong\u003e使用者的提问\u003c/strong\u003e以及 \u003cstrong\u003eAI 应用的回复内容\u003c/strong\u003e进行过滤。","title":"AI 内容防火墙"},{"content":"\r需求背景 ​\t家用摄像头作为一种基础视频监控设备，近年来在中国乃至全球范围内迅速普及，成为许多家庭不可或缺的安全工具。随着技术进步和消费者对家庭安全需求的增加，市场呈现智能化、线上化和品牌竞争加剧的趋势。然而，家用摄像头在使用过程中产生并记录海里的音频和视频数据，这些数据关乎广大用户群体的各种行为活动。\n​\t用户安装家用摄像头的动机体现在两个方面：一是实时关注家中老人、孩子或宠物的动态，二是防范盗窃或入室犯罪，保护财产安全。但是随着诸多家用摄像头数据泄露事件和隐患的揭露，其伴生的数据隐私与安全风险越发受到用户关注，成为当前网络安全的热点问题。\n​\t针对背景和需求，梳理了 5 部分内容，以下给出目录，具体细节不作展开，此需求来自相关部分，本文作记录复盘。\n报告内容 家用摄像头市场情况和趋势变化 市场普及的现状与驱动因素 技术进步的推动与产品演变 渠道变迁与线上化趋势 品牌竞争与市场格局 隐私安全挑战与应对 未来市场趋势 家用摄像头数据存储模式分析 SD卡存储：家庭监控的入门之选 DVR存储：模拟时代的过渡方案 NVR存储：家用监控的主流支柱 CVR存储 云存储 数据传输与用户访问模式 数据访问传输模式 涉及传输协议及其细节 加密与压缩算法 用户可控度与可靠性 小结 安全威胁与风险 数据安全威胁 主要风险来源 小结 问题与建议 用户与厂商安全意识薄弱 缓解措施与建议 调研总结 ​\t家用摄像头相关的数据安全问题集中在泄露、隐私侵犯和厂商漏洞，覆盖摄像头数据存储、传输和用户访问的整个过程。目前，家用摄像头的数据存储模式包括本地、云端和混合三种，本地存储隐私性强但容量有限，云存储便利却依赖厂商安全，混合模式灵活但成本较高。传输模式与访问方式是数据安全的关键环节。本地到用户的P2P模式延迟低但跨网受限，云模式支持远程访问却易受服务器攻击，混合模式兼顾两者但操作复杂。未来，随着5G和AI普及，设备功能将扩展至健康监测等新领域，智能家居市场的增长潜力巨大。而摄像头的安全属性和厂商的安全水平将会成为用户关注的核心问题。\n​\t总体而言，家用摄像头在提升生活便利的同时，其安全风险贯穿全链条。当前，技术漏洞与管理疏忽并存，用户与厂商责任需更好协调。未来，通过技术升级、用户教育和政策约束，行业有望实现便利与安全的双赢，智能安全的摄像头将成为家庭标配，数据保护也将成为品牌竞争的关键。\n","permalink":"https://lz0o0.github.io/zh/posts/affair-logs/%E5%AE%B6%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/","summary":"本文对目前国内主流家用摄像头的情况进行了梳理，分析了市场情况和发展趋势；着眼于数据安全，侧重分析了摄像头目前数据采集存储，以及传输的模式特点，旨在揭示家用摄像头中潜藏的数据安全问题和风险。","title":"家用摄像头数据安全分析"},{"content":"\r1. 问题描述 本地使用 Hugo 启动时，网站样式能够正常显示，但部署到 GitHub Pages 后，样式无法加载（如上图所示）。通过浏览器 F12 调试，控制台报错信息如下：\n1 Failed to find a valid digest in the \u0026#39;integrity\u0026#39; attribute for resource \u0026#39;https://lz0o0.github.io/assets/css/stylesheet.6da9a63d25a9608bca2f7f907a0，30e887a7dd3c3f3918e4cc113129361414bda.css\u0026#39; with computed SHA-256 integrity \u0026#39;9J1myq6eoP1D8h8p5xqNPihFF+13Dyqob6ASlTrTye8=\u0026#39;. The resource has been blocked. SRI和校验失败： Subresource Integrity (SRI) 是一种安全机制，用于确保在加载资源时，它们的内容与预期的哈希值一致。如果资源的实际哈希值与 HTML 文件中 integrity 属性定义的不一致，浏览器会阻止加载资源。\n2. 原因\u0026amp;解法 根据报错信息，大致确认问题是因为 SRI 校验时hash值不匹配，CSS加载失败，从而导致网页样式无法正常显示，无法看到多彩的网页。公网上主要的解释和解决办法，主要是以下三种：\n1. Cloudflare对 JS 和 CSS，默认执行\u0026quot;Auto Minify\u0026quot;，文件压缩后和 hugo 的处理存在冲突，导致校验失效；对应禁用选项，刷新缓存即可\r2. 修改 Hugo 的文件，禁用指纹校验选项。具体而言，在config.yaml或者hugo.yaml中添加以下代码\r1 2 3 params: assets: disableFingerprinting: true 3. 修改 html 文件索引入口，禁用 SRI 校验：将文件`(themes\\PaperMod\\layouts\\partials\\head.html)`中的 **integrity** 参数索引都置空`(integrity=\u0026quot;\u0026quot;)`\r方法①本鲤不知道在哪配置，没有实操。但我认为可能是压缩的问题，因为本地加载并未出现类似问题，不一致大概来自云端的处理 方法②比较合理，然而，本鲤实际配置后没什么效果，可能是 hugo 不内置该参数了 使用方法③，本鲤成功显示了CSS样式。大部分教程只提示改(integrity=\u0026quot;{{ $stylesheet.Data.Integrity }}\u0026quot;)，但我建议你把文件中所有的 integrity 参数索引都置空，因为另外一处索引时可能也会报错，因此建议都置空\nMind！ 可按照231的顺序，如能解决最好，前端的问题比较多样，本鲤发现甚至有因为LF和CRLF问题的（比较有用的讨论或文档，附在文末 3. 小结 本文描述了Hugo+Papermod部署到github pages时，由于SRI校验失败，导致CSS文件无法正常加载，不显示网页样式内容的问题。在文档中列举了三种主要的解决方法，并且分析了可能的问题（may优化导致校验失效）。博主实际通过修改配置的html索引，禁用 SRI 校验选项，解决了该问题\n如有意指点，或碰到问题，欢迎留言讨论~\nrefer https://swopnil.com/blog/valid-digest-integrity-error-hugo-styling/ https://github.com/alanorth/hugo-theme-bootstrap4-blog/issues/53 https://stackoverflow.com/questions/65040931/hugo-failed-to-find-a-valid-digest-in-the-integrity-attribute-for-resource ","permalink":"https://lz0o0.github.io/zh/posts/error-logs/hugo%E5%8F%91%E5%B8%83%E5%90%8E%E4%BB%85%E6%96%87%E6%9C%AC%E6%98%BE%E7%A4%BAcss%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD/","summary":"本文分析并解决了Hugo+Papermod部署到github pages时，由于SRI校验失败，导致CSS文件无法正常加载不显示网页样式内容的问题。","title":"hugo发布css无法加载问题"},{"content":"背景 内网穿透：网络连接中的一种术语，也称作NAT（毕竟NAT导致了内外网的划分）穿透，是一种用在外网（相对局域网而言，包括公网和其它局域网）计算机访问局域网内计算机节点及其服务的通信连接技术。\n内网穿透依赖的核心原理是公私网地址的映射转换，转换结果就是NAT表项的建立。按照穿透结构来说，主要包含基于服务器数据中转的穿透（穿透内网穿透解法）和点对点穿透（UDP/TCP打洞）两种，两种方法的都需要中间服务器的参与，但后者只需作为集中服务器参与协商即可（两端安装工具，服务集中协商作为服务提供），而前者的压力较大。简单而言，就是A客户端要访问B客户端，通过一台服务器进行桥接，桥接有两种方式，一种是相互转发，另一个是告诉对方的地址，自己就当一个介绍人的角色。\n内网穿透传统方式会出现服务器和客户机之间的数据传输全部经过中转服务器，传输速度将受制于中转服务器的上下行带宽，不过稳定性很好，要求云主机带宽大。相比之下，点对点穿透能解决大流量带来的困扰，可以实现服务器和客户机之间打洞直接进行数据通信。然而，这种方式需要服务器和客户机都安装穿透工具，对用户访问端不够方便，而且这种方式受复杂网络环境影响较大，不能100%实现，稳定性欠缺。\n关于穿透原理分析，详情可参考：内网穿透原理分析\n内网穿透除了可能需要云主机外，还需要穿透工具协助，几款主流的工具包括frp（开源）、ngrok（开源）、zerotier（开源/商业）、花生壳（商业）、向日葵（远程桌面）、VPN（加密穿透）等等。就各自特点而言，商业款有专业团队维护，且使用简单方便，但数据包会流经第三方，因此数据安全是一大隐患。而对于个人有动手能力的用户或者中小型企业的小规模使用可以选择开源方式。\n综合软件配置复杂度、穿透能力等因素，个人觉得目前最好的选择就是 frp 用于对流量转发不大的场景，而需要大量 udp 传输的场景可以选择zerotier。\n需求来自UCAS课程，此处作记录复盘。本文演示基于 frp 的实现，也可参考：frp内网穿透\n基于 Frp 的内网穿透实现：以内网文件共享为例 1. frp 源码获取 git：https://github.com/fatedier/frp/releases 解压：tar -zxvf frp_0.61.2_linux_amd64.tar.gz\n文件中包含 frpc、frpc.toml；frps、frps.toml；以及LICENSE文件，分别对应客户端和服务端的配置项设置，可删去相对的内容\n2. 配置 frps 服务端设置项：中转服务器 frps.toml文件配置：这里的用户和密码主要用于登录frp访问面板 1 2 3 4 5 6 7 8 9 bindPort = 7000 webServer.addr = \u0026#34;0.0.0.0\u0026#34; webServer.port = 7500 webServer.user = \u0026#34;admin\u0026#34; webServer.password = \u0026#34;admin\u0026#34; auth.method=\u0026#34;token\u0026#34; auth.token = \u0026#34;passtoken\u0026#34; 配置后启动即可，成功会显示初始化日志：./frps -c frps.toml，随后可以访问公网IP：7500网站查看访问面板，这步相当于将公网服务器的7000端口和frp转发绑定，通过用户登录限制，限制了可以访问共享服务的公网节点。需要注意的是，在服务器，必须开启以下端口（6000和6001是为内网节点共享服务配置）：\n启动服务端之后，可以进入访问面板进行登录，并简单查看，当前绑定在7000端口：\n后台挂载进程 利用systemd启动后台进程挂载，创建文件：vim /etc/systemd/system/frps.service，文件内容如下(指定了访问面板的信息和绑定端口)：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [Unit] Description = frp server After = network.target syslog.target Wants = network.target [Service] Type=simple ExecStart = /dev-ops/frp/frps -c /dev-ops/frp/frps.toml ExecStop=/bin/kill $MAINPID Restart=always RestartSec=5 [Install] WantedBy = multi-user.target 文件创建成功后，启动即可：\n1 2 systemctl start frps systemctl status frps 3. 配置 frpc 客户端设置项：局域网节点 配置frpc.toml文件，向外网共享文件服务，向外网暴露什么服务由内网节点决定，因此上面服务端没有这部分配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #你的云服务器公网ip serverAddr = \u0026#34;x.x.x.x\u0026#34; #连接到云服务器端口,需要和frps.toml配置文件中端口一致 serverPort = 7000 auth.method = \u0026#34;token\u0026#34; auth.token = \u0026#34;passtoken\u0026#34; #开放端口连接 [[proxies]] name = \u0026#34;test-tcp\u0026#34; type = \u0026#34;tcp\u0026#34; localIP = \u0026#34;127.0.0.1\u0026#34; localPort = 8080 remotePort = 6100 # 服务器需要开放该端口 #共享文件访问 [[proxies]] name = \u0026#34;d_drive\u0026#34; type = \u0026#34;tcp\u0026#34; remotePort = 6001 # 服务器上用于访问的端口，需要开放该端口 [proxies.plugin] type = \u0026#34;static_file\u0026#34; localPath = \u0026#34;D:\\\\\u0026#34; # 要对外暴露的目录（这里相当于向外网暴露文件服务） stripPrefix = \u0026#34;d_drive\u0026#34; # 访问路径名，此处即http://x.x.x.x:6001/d_drive/ httpUser = \u0026#34;username\u0026#34; # 用户名 httpPassword = \u0026#34;password\u0026#34; # 密码 4. 连接客户端与服务端 确保 frpc.exe 和 frpc.toml 位于同一目录。\n切换到 frpc.exe 所在目录：cd path\\to\\frp\n执行以下命令启动客户端：.\\frpc.exe -c frpc.toml\n执行命令启动服务端： .\\frps -c frps.toml\n两端连接可以访问frp面板访问内网的文件内容；此时再次访问服务面板，共享的服务映射更新\nurl访问共享的文件服务，此时可以看到局域网节点D盘符下的文件内容，支持访问下载\nFrp 流量分析 在局域网节点，采集 frp 连接访问过程中的流量，分析其连接、数据传输过程的特点，寻找可能的风险问题\nrefer 内网穿透详解 - cyrus0w - 博客园\u0026gt; frp内网穿透零基础详细教程-CSDN博客\u0026gt; frp内网穿透最新实践教程 从零开始详细步骤_哔哩哔哩_bilibili\u0026gt; [使用frp配置内网(穿透保姆级教程])_frp内网穿透-CSDN博客\u0026gt; ","permalink":"https://lz0o0.github.io/zh/posts/nice-techs/%E5%88%A9%E7%94%A8-frp-%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","summary":"frp 是一种反向代理工具, 被广泛用于内网穿透，能够将外网暴露内网服务，本文具体介绍了如何基于云服务器和frp源码实现简单的内网穿透，是一种很有意思和实际用处的技术。","title":"利用 frp 实现内网穿透"},{"content":"\r1. 前言(๑✦ˑ_✦) 前年用 BT+Wordpress+阿里轻量化服务器 搭了个网站，当时挺上头的\u0026hellip;\u0026hellip; 后来由于服务确实卡顿，偶尔容易出问题，加上服务器每月有开销，当时又忙着准备保研和毕设，慢慢就搁置了\u0026hellip;\n前段时间，我导提到说 数字人应该有数字人的意识，最好能将自己的一生都数字化，细想起来，感觉颇显浪漫！搞起来(▼O▼ﾒ)！\n花了清明两天的时间骨架建完，还是布到公网吧，希望能定期输出新内容\u0026hellip;\n2. 摘要 Okay，个人博客的搭建过程，整体来说可以分三个部分，后两个部分，仅推荐个别博文（步骤都差不多，没必要重复堆文字，难的从来都是根据需求自定义：\n明确建站框架和基本流程：hugo+git、hexo+git、bt+wordpress 内容设计与自定义调整：结构熟悉（hugo\u0026amp;theme、自定义修改（需求\u0026amp;设计 内容发布与部署：内容与数据维护、公网发布、F\u0026amp;R 博客的意义？搭建流程？核心需求？ 博客是一种不错的管理方法和输出形式。你完全可以使用博客来记录、组织自己零碎的知识、经验所得，甚至于你的心理感受；维护博客的过程，也能很好锻炼你的统筹能力，更好地组织你的所想、所学、所得；此外，博客很可能是分享和展示自己的一种不错媒介\u0026hellip; 搭建博客与搭建网站的过程类似，除了一个内容加工平台或工具用于生成、编辑输出内容外，你还需要一个内容托管平台帮助你托管内容、供人访问，可以自建也可以租赁，这里 github 的优势就凸显出来了 基于 wordpress 建站比较适合商业用户，需要性能不错的服务器、域名资源，缺点网站结构相对复杂，访问容易卡顿、维护持续消耗成本；个人写作、技术博客用户，关注美观和生态，推荐 hexo ；若看重速度和轻量化，那 hugo 当仁不让 3. Demo搭建/发布+基本自定义 Demo搭建/发布：基础概念（概念和文件解读，完全不懂的，想通透点就啃啃）、一部到位版（装修以前的部分Demo搞定了，后面想想自己的需求，再去逐渐增加满足）\n基础自定义：papermod主题配置，理解基本布局、内容索引管理方法\n高阶？：没有高阶，满足你的需求就是最好的，切忌什么都要，重要的从来是内容，需要什么自己再加就是\n写在最后 再次强调一点，我认为博客本质只是一种管理方法和输出形式，特别适合像本鲤这种三天两头想要梳理东西，然后定期整点儿输出，但却因为没有好好管理，事情又一茬接一茬，从而老感觉间歇性阵痛的人\n根据我的经验，你可以先试试基于一些简单的主题，比如stack/papermod去搭demo，然后再逐渐自定义，慢慢你有感觉、熟悉规律后知道怎么改了，你可以继续上点看起来“花里胡哨”的主题，刷新刷新认识。好看并不一定好，基本代价就是结构复杂，文件多，你花在上面的时间过多，本鲤就不想在维护上浪费世界（从上面demo图，其实本站最早用blowfish搭的，结构都基本定好了，后面觉得维护稍显麻烦，终是大道至简，简单归简单但自定义空间极大\n美化网站的过程不要迷失本来的目的，想清楚自己的需求，样式都应该为内容呈现服务，不要舍本逐末\n","permalink":"https://lz0o0.github.io/zh/posts/affair-logs/blog--%E7%AE%A1%E7%90%86-+-%E8%BE%93%E5%87%BA/","summary":"如何理解博客？博客构建的逻辑和步骤是怎样的？","title":"Blog == 管理 + 输出"},{"content":"音乐, 是对岁月与命运的吟唱与呐喊~\n","permalink":"https://lz0o0.github.io/zh/posts/life/songs/","summary":"听一些，我认为伟大的\u0026hellip;..音乐\u0026hellip;","title":"🎧 我的歌单Songs"},{"content":"\r漫画\r9.8\r剑风的世界中弥漫着阴郁、肃杀、血腥与绝望，但三浦笔下的格斯总是充满斗争与反抗精神，从幼时起的各种磨难，无不促成当前的格斯。不论身处何种境地，握住斩龙向命运挥砍，无路可退就只有向前冲杀，面对绝望与痛苦，剑风的世界里从来没有退缩二字。\r剑风传奇\r三浦建太郎 ·1989\r动画\r9.5\rEVA给人的感觉因人而异，可能是致郁、扭曲，也可能是真实、平白，不论如何，因为 EVA 表达要借由的东西有些复杂而略微难懂（EVA 化用了很多宗教、哲学的意象讲自己的故事！），所以回忆起来会稍感空洞、干涩。心之壁、人类补完这些看起来复杂的词，仔细想想，作者可能就是是想教会那时候的年轻一代们学会悦纳真实、悦纳自己、在繁复隔绝的集体中寻找自我回归真实，走向新生。EVA吸引人的绝不只是血腥激烈的机甲互博、血肉横飞，尽管世界观是宏大的零散的，需要自己拼凑重建，但这些复杂的事情最终都聚焦到人性、孤独、爱与痛苦的哲学的探讨上，其中传达出的真实能让人感到极端的露骨更甚者释然，不论你如何感觉，事实就是这样，这就是某种程度的自我补完。\r新世纪福音战士\r庵野秀明 ·1995\r","permalink":"https://lz0o0.github.io/zh/posts/life/artworks/","summary":"看一看，我觉得的好看的\u0026hellip;动画、漫画、电影、剧目","title":"📺 我喜欢的视画作品"}]